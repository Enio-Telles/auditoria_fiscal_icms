"""
Endpoints de Gest√£o de Usu√°rios
CRUD completo para usu√°rios do sistema
"""

from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from sqlalchemy import or_
import logging

from ...database.connection import get_db_session
from ...database.models import Usuario
from ..schemas import UserCreate, UserResponse, UserUpdate, MessageResponse
from .auth import get_current_user, hash_password
from ..middleware.error_handler import APIError, BusinessLogicError

logger = logging.getLogger(__name__)
router = APIRouter()

@router.get("/", response_model=List[UserResponse], summary="Listar usu√°rios")
async def list_users(
    page: int = Query(default=1, ge=1, description="P√°gina (iniciando em 1)"),
    page_size: int = Query(default=50, ge=1, le=500, description="Itens por p√°gina"),
    search: Optional[str] = Query(None, description="Buscar por nome ou email"),
    ativo: Optional[bool] = Query(None, description="Filtrar por status ativo"),
    db: Session = Depends(get_db_session),
    current_user: Usuario = Depends(get_current_user)
):
    """
    Lista todos os usu√°rios do sistema com pagina√ß√£o e filtros
    """
    logger.info(f"üë• Listando usu√°rios - P√°gina {page}, Usu√°rio: {current_user.email}")
    
    # Query base
    query = db.query(Usuario)
    
    # Aplicar filtros
    if search:
        search_term = f"%{search}%"
        query = query.filter(
            or_(
                Usuario.nome.ilike(search_term),
                Usuario.email.ilike(search_term)
            )
        )
    
    if ativo is not None:
        query = query.filter(Usuario.ativo == ativo)
    
    # Contar total
    total = query.count()
    
    # Aplicar pagina√ß√£o
    offset = (page - 1) * page_size
    users = query.offset(offset).limit(page_size).all()
    
    logger.info(f"‚úÖ Retornando {len(users)} usu√°rios de {total} total")
    
    return users

@router.get("/{user_id}", response_model=UserResponse, summary="Buscar usu√°rio por ID")
async def get_user(
    user_id: int,
    db: Session = Depends(get_db_session),
    current_user: Usuario = Depends(get_current_user)
):
    """
    Retorna informa√ß√µes de um usu√°rio espec√≠fico
    """
    logger.info(f"üë§ Buscando usu√°rio ID {user_id} - Solicitado por: {current_user.email}")
    
    user = db.query(Usuario).filter(Usuario.id == user_id).first()
    
    if not user:
        logger.warning(f"‚ùå Usu√°rio {user_id} n√£o encontrado")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Usu√°rio n√£o encontrado"
        )
    
    return user

@router.post("/", response_model=UserResponse, summary="Criar novo usu√°rio")
async def create_user(
    user_data: UserCreate,
    db: Session = Depends(get_db_session),
    current_user: Usuario = Depends(get_current_user)
):
    """
    Cria um novo usu√°rio no sistema
    """
    logger.info(f"‚ûï Criando usu√°rio {user_data.email} - Por: {current_user.email}")
    
    # Verificar se email j√° existe
    existing_user = db.query(Usuario).filter(Usuario.email == user_data.email).first()
    if existing_user:
        logger.warning(f"‚ùå Email j√° cadastrado: {user_data.email}")
        raise BusinessLogicError(
            "Email j√° cadastrado no sistema",
            {"email": user_data.email}
        )
    
    # Criar hash da senha
    password_hash = hash_password(user_data.password)
    
    # Criar novo usu√°rio
    new_user = Usuario(
        nome=user_data.nome,
        email=user_data.email,
        cargo=user_data.cargo,
        identificacao=user_data.identificacao,
        senha_hash=password_hash,
        ativo=True
    )
    
    try:
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        
        logger.info(f"‚úÖ Usu√°rio criado com sucesso: {new_user.email} (ID: {new_user.id})")
        return new_user
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erro ao criar usu√°rio: {e}")
        raise APIError("Erro ao criar usu√°rio", 500, {"error": str(e)})

@router.put("/{user_id}", response_model=UserResponse, summary="Atualizar usu√°rio")
async def update_user(
    user_id: int,
    user_data: UserUpdate,
    db: Session = Depends(get_db_session),
    current_user: Usuario = Depends(get_current_user)
):
    """
    Atualiza informa√ß√µes de um usu√°rio existente
    """
    logger.info(f"‚úèÔ∏è Atualizando usu√°rio {user_id} - Por: {current_user.email}")
    
    # Buscar usu√°rio
    user = db.query(Usuario).filter(Usuario.id == user_id).first()
    if not user:
        logger.warning(f"‚ùå Usu√°rio {user_id} n√£o encontrado para atualiza√ß√£o")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Usu√°rio n√£o encontrado"
        )
    
    # Aplicar atualiza√ß√µes (apenas campos n√£o nulos)
    update_data = user_data.dict(exclude_unset=True)
    
    for field, value in update_data.items():
        setattr(user, field, value)
    
    try:
        db.commit()
        db.refresh(user)
        
        logger.info(f"‚úÖ Usu√°rio {user_id} atualizado com sucesso")
        return user
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erro ao atualizar usu√°rio {user_id}: {e}")
        raise APIError("Erro ao atualizar usu√°rio", 500, {"error": str(e)})

@router.delete("/{user_id}", response_model=MessageResponse, summary="Desativar usu√°rio")
async def deactivate_user(
    user_id: int,
    db: Session = Depends(get_db_session),
    current_user: Usuario = Depends(get_current_user)
):
    """
    Desativa um usu√°rio (soft delete)
    """
    logger.info(f"üóëÔ∏è Desativando usu√°rio {user_id} - Por: {current_user.email}")
    
    # Verificar se n√£o est√° tentando desativar a si mesmo
    if user_id == current_user.id:
        logger.warning(f"‚ùå Usu√°rio {current_user.email} tentou desativar a si mesmo")
        raise BusinessLogicError("N√£o √© poss√≠vel desativar sua pr√≥pria conta")
    
    # Buscar usu√°rio
    user = db.query(Usuario).filter(Usuario.id == user_id).first()
    if not user:
        logger.warning(f"‚ùå Usu√°rio {user_id} n√£o encontrado para desativa√ß√£o")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Usu√°rio n√£o encontrado"
        )
    
    # Desativar usu√°rio
    user.ativo = False
    
    try:
        db.commit()
        logger.info(f"‚úÖ Usu√°rio {user_id} ({user.email}) desativado com sucesso")
        
        return MessageResponse(
            message=f"Usu√°rio {user.nome} desativado com sucesso",
            success=True,
            data={"user_id": user_id, "email": user.email}
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erro ao desativar usu√°rio {user_id}: {e}")
        raise APIError("Erro ao desativar usu√°rio", 500, {"error": str(e)})

@router.post("/{user_id}/activate", response_model=MessageResponse, summary="Reativar usu√°rio")
async def activate_user(
    user_id: int,
    db: Session = Depends(get_db_session),
    current_user: Usuario = Depends(get_current_user)
):
    """
    Reativa um usu√°rio desativado
    """
    logger.info(f"üîÑ Reativando usu√°rio {user_id} - Por: {current_user.email}")
    
    # Buscar usu√°rio
    user = db.query(Usuario).filter(Usuario.id == user_id).first()
    if not user:
        logger.warning(f"‚ùå Usu√°rio {user_id} n√£o encontrado para reativa√ß√£o")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Usu√°rio n√£o encontrado"
        )
    
    # Reativar usu√°rio
    user.ativo = True
    
    try:
        db.commit()
        logger.info(f"‚úÖ Usu√°rio {user_id} ({user.email}) reativado com sucesso")
        
        return MessageResponse(
            message=f"Usu√°rio {user.nome} reativado com sucesso",
            success=True,
            data={"user_id": user_id, "email": user.email}
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erro ao reativar usu√°rio {user_id}: {e}")
        raise APIError("Erro ao reativar usu√°rio", 500, {"error": str(e)})
